S60: Containers CI/CD pipeline creation
1. Containers is Linux Feature
2. It works only in Linux OS
3.Control groups and namespaces features - containers runs based on this feature and security comes from this features
4.Control Groups - Containers capable of consuming all resources of OS,Yet we need to control the utilization and its been done by control groups - limit the resources,manage the usage of resources
5. Namespaces - meant to isolate the resources , ex:netns  is network namespaces for containers
6. Docker - why docker
    1.Simple EcoSystem -  whole ecosystem is simple and docker image part is simple to setup
    2. Best UX - User experience - Simpler to Manage and extends its features to interact over APIs
7.Docker brings immutability - Never modify the existing container
8.Any container runtimes will have two types
    1.High Level Runtime -
    2.Low Level Runtime
9. Docker architecture :
    Docker Client
    Docker Host (Docker daemon)
    ContainerD
10.Docker Image - An image is a read-only template with instructions for creating a Docker container.
    to run any docker container it needs an docker image
11.Installation - 2 types
    Docker runs by default by root user -
    if we give permission to normal user then its gain most of the privileges as root user
    it causes security issues - to avoid this ROOTLESS installation is preferable
    where normal user can run containers even with out root privilege
    curl -s https://get.docker.com | sudo bash
    curl -s https://get.docker.com/rootless | bash
    https://docs.docker.com/engine/security/rootless/ - follow each step carefully
S61:
12. Docker Image (container)- https://hub.docker.com/
    we will have many images and can reuse in ur server
    docker pull nginx - pull nginx image
    docker images - list the images
    docker rmi nginx - remove the image
13. Docker Versioning
    Any docker image we pull, image will have certain version, by its pull latest image
    In docker terminology version is called tag
    docker run nginx:tag
    docker run nginx:1.20
14.docker run nginx - pull(if not there) and run
    docker run -d nginx - detached mode ,run in background
    docker ps -a
15.Every Container we create we get container id and container name
CONTAINER ID   IMAGE     COMMAND                  CREATED          STATUS          PORTS     NAMES
b065e88b7514   nginx     "/docker-entrypoint.…"   36 seconds ago   Up 33 seconds   80/tcp    elated_shtern

we can update the container id and names
docker run -d --name nginx nginx
CONTAINER ID   IMAGE     COMMAND                  CREATED             STATUS             PORTS     NAMES
c6b1e4b4605f   nginx     "/docker-entrypoint.…"   59 minutes ago      Up 59 minutes      80/tcp    nginx
b065e88b7514   nginx     "/docker-entrypoint.…"   About an hour ago   Up About an hour   80/tcp    elated_shtern
 docker run --name some-mongo -d mongo:tag
... where some-mongo is the name you want to assign to your container and tag is the tag specifying the MongoDB version you want
16. container low level info using docker inspect option
    docker inspect nginx (name of the container/ container id)
17. port expose can be done in two ways
    dynamic and static ports
    Dynamic port ranges from 49153 to 65535
    to open dynamic port use -P option
    docker run -d -P nginx
    to open static port give -p option with
    docker run -d -p <hostport>:<containerport>
    docker run -d -p 80:80 nginx
18. docker ps -a -q - gives all the containers id
19. docker rm -f $(docker ps -a -q)
20. to get into container - docker exec -it <containerid>
21. volume of container can be mapped using -v option -v <hostpath>:<containerpath>
docker run -d -v /home/centos/data/:/data/db mongo - persistent volume path
    /home/centos/data/:/data/db  this is persistent path where if we remove the container.
    we can use same volume while creating another container so that data will be persistent
22.container path will be diff for every image.. for nginx
    /some/content:/usr/share/nginx/html
23. we can parse info to containers using variables. most of the application uses variables rather than config file
24. we can parse variables either directly or from file
    docker run centos:7 env
    parse directly using -e option
    docker run -e URL=google.com centos:7 env
25. from file
    parse from --env-file
    docker run --env-file ./env centos:7 env
26. Container Resources
    docker run -it centos:7 bash - directly we can give image with -it option/  bash will let inside container
        ls
        yum install epel-release -y
        yum install stress -y   - epel-release dependency
    docker run --memory 256M -it centos:7 bash - limit the memory
    yum install epel-release -y it will be very slow.. as memory is limited
27. Containers by default consume all CPU and MEM of host machine. This is nice feature where VMs cant do this. it leads to problem where some containers using more resources due to bug or some issues.. this leads to performance issues in other containers
    To avoid this always give some limitations .. as best practise
    --cpu and --mem are the options can be used to control the resources
28. Containers have the capability of self healing by auto restart
    docker run --restart string
    string - no
            on-failure Restart only if exits with non zero exit status
            always - restart always
            unless-stopped
    docker run --restart always centos:7 sleep 10
    most of the scenarios we wont do outside restart
29.containers has to auto restart based on health status
    docker run --health-cmd option
    docker run --health-cmd 'ls' -d centos:7 sleep 1000

DOCKERFILE: docker hub registry
1.Docker can build images automatically by reading the instructions from a Dockerfile.
2.A Dockerfile is a text document that contains all the commands a user could call on the command line to assemble an image.
vim Dockerfile
    FROM centos:7 - like invoking the official/base image | to build this image docker build -t sample .
    RUN yum install httpd -y
    CMD httpd -DFOREGROUND
3.docker build -t sample . - create own image sample with above Dockerfile
4. docker login - give uname pwd
5. docker push docker.io/srimaanaws2021/sample.v1 - now it will push ur image to ur dockerhub
    docker push docker.io/uname/image:tag
6. docker run -d docker.io/srimaanaws2021/sample.v1 - now it will pull and run ur image
7. EXPOSE 80
8. ENV
9. ADD or COPY - Vimp option








